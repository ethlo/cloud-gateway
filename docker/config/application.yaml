server:
  port: 8888

features:
  control-panel-handlers:
    enabled: true
  body-handlers:
    enabled: false

http-logging:
  auth:
    jwt:
      enabled: false
      user-claim: preferred_username
      realm-claim:
    basic:
      enabled: true
      realm-header-name: baz-realm
  capture:
    enabled: true
    memory-buffer-size: 500B
    temp-directory: /tmp
  providers:
    file:
      enabled: false
      pattern: '{{gateway_request_id}} {{realm_claim}} {{user_claim}} {{method}} {{path}} {{host}} {{request_headers["Content-Length"][0]}} {{status}} {{user_agent}} {{duration | numberformat("#.###") }}'
      body-storage-directory: /tmp/cloud-gateway/bodies
    clickhouse:
      enabled: true
      url: 'jdbc:ch://localhost:18123/default?compress=0;async_insert=1,wait_for_async_insert=0'
  matchers:
    - id: nope
      predicates:
        - Path=/nope
        - NotHost=example.com
        - NotPath=/yep
        - NotMethod=GET
      request:
        body: STORE
    - id: bar
      predicates:
        - Path=/anything/**
        - Method=POST,PUT,DELETE
      request:
        body: STORE
      response:
        body: SIZE
    - id: baz
      predicates:
        - Path=/get2/**
        - Method=GET
        - NotExtension=
      response:
        body: NONE
logging:
  level:
    com.ethlo.http: INFO
    org.springframework.cloud.gateway: INFO
    com.ethlo.qjc: INFO
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,clickhouse,env
  endpoint:
    env:
      show-values: when_authorized
spring:
  cloud:
    gateway:
      filter:
        request-rate-limiter:
          enabled: true
          deny-empty-key: false
          empty-key-status-code: 403
      metrics:
        tags:
          path:
            enabled: true
        enabled: true
      routes:
        - id: dynamic-hosts
          uri: http://default
          predicates:
            - Path=/services/**
          filters:
            - PathHost=1,[\w-]+

        - id: codes
          uri: https://httpbin.org
          predicates:
            - Path=/api/**
            - name: Java
              args:
                template: SimpleRoutePredicateTemplate
                expression: >
                  public boolean test(ServerWebExchange exchange) {
                      System.out.println("Hello from a custom predicate: " + exchange.getRequest().getId());
                      return "bar".equalsIgnoreCase(exchange.getRequest().getQueryParams().getFirst("foo"));
                  }
          filters:
            - name: Java
              args:
                template: SimpleGatewayFilterTemplate
                expression: >
                  public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
                      System.out.println("Hello from a custom filter: " + exchange.getRequest().getId());
                      return chain.filter(exchange);
                  }
            - name: InjectBasicAuth
              args:
                username: foo
                password: bar
            - SetRequestHeader=x-realm,my-realm
        - id: http-bin-get
          uri: https://httpbin.org/get
          predicates:
            - Path=/get
          filters:
            - name: InjectBasicAuth
              args:
                username: foo
                password: bar
            - SetRequestHeader=x-realm,baz
        - id: http-bin-anything
          uri: https://httpbin.org/anything
          predicates:
            - Path=/anything
          filters:
            - name: RequestRateLimiter
              args:
                local-rate-limiter:
                  replenish-rate: 2
                  refresh-period: 10
  web:
    resources:
      static-locations:
        - file:/static
  webflux:
    problemdetails:
      enabled: true

upstream:
  interval: PT10S
  services:
    - name: my-service
      config-url: http://localhost:8000/config.yaml